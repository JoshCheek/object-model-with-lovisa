#!/usr/bin/env ruby


# # I can get a heap dump with this code:
# require 'objspace'
# File.open "heap.json", "w" do |f|
#   ObjectSpace.dump_all output: f
# end
#
# # So if I were to re-work on it, could just run the code in a separate process,
# # tracing all the events, and heap dumping on each event. Then diff the heaps
# # to save space (heap dump looks to be about 5mb of JSON). That can all be easily tested.
# # The rebuilding can all be easily tested. This, then, allows traversal forwards and backwards in time.
# # as well as allowing a full traversal of all objects.


# If I want to show C source code:
#
# require 'yard'
# prydoc_paths = Gem.find_latest_files('pry-doc')
#
# if !prydoc_paths || prydoc_paths.empty?
#   raise "You need to `gem install pry-doc`"
# end
#
# prydoc_path  = prydoc_paths.find { |path| File.basename(path) == 'pry-doc' }
# path         = prydoc_path + '/core_docs_22'
# registry     = YARD::Registry.load_yardoc path
# puts registry['Class#new'].source
#
# # >> VALUE
# # >> rb_class_new_instance(int argc, const VALUE *argv, VALUE klass)
# # >> {
# # >>     VALUE obj;
# # >>
# # >>     obj = rb_obj_alloc(klass);
# # >>     rb_obj_call_init(obj, argc, argv);
# # >>
# # >>     return obj;
# # >> }

$LOAD_PATH.unshift File.expand_path('../lib', __dir__)
require 'spelunk/cli'
cli = Spelunk::CLI.new($stdin, $stdout, $stderr, ARGV)
cleanups = []
tp = TracePoint.new do |tp|
  begin
    event = Spelunk::Event.from_tp(tp)
    exit if :exit == cli.event(event)
  rescue Exception
    cleanups.each &:call
    raise
  end
end

$stdin.raw!
cleanups.unshift -> { $stdin.cooked!  }

tp.enable
cleanups.unshift -> { tp.disable }

begin
  require File.expand_path(cli.filename)
ensure
  cleanups.each &:call
end
